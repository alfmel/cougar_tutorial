<?php

namespace CougarTutorial;

use Cougar\Security\Security;
use Cougar\Cache\CacheFactory;
use Cougar\PDO\PDO;
use Cougar\RestService\AnnotatedRestService;
use CougarTutorial\Security\DbBasicAuthenticationProvider;
use CougarTutorial\Security\ActionAuthorizationProvider;
use CougarTutorial\Security\StateModelAuthorizationProvider;
use CougarTutorial\Security\VisitedStateModelAuthorizationProvider;
use CougarTutorial\Security\UserModelAuthorizationProvider;

// Initialize the application
require_once(__DIR__ . "/../../init.php");

// Create a new Security context (required by Model Factory and Rest Service)
$security = new Security();

// Create the AnnotatedWebService object to handle handle incoming REST requests
$service = new AnnotatedRestService($security);

// Add the authorization providers to the security context
$security->addAuthorizationProvider(new ActionAuthorizationProvider());
$security->addAuthorizationProvider(new StateModelAuthorizationProvider());
$security->addAuthorizationProvider(
    new VisitedStateModelAuthorizationProvider());
$security->addAuthorizationProvider(new UserModelAuthorizationProvider());

// Create the application cache object
$cache = CacheFactory::getApplicationCache();

// Create the database connection
$pdo = new PDO("sqlite:" . __DIR__ . "/../../db/cougar_tutorial.db");

// Create the Model factory
$model_factory = new ModelFactory($security, $cache, $pdo);

// Create User object
$user = new User($security, $model_factory);

// Create the State object
$state = new State($security, $model_factory);

// Create the visited state object
$visited_state = new VisitedState($security, $model_factory);

// Create the basic authentication provider and add it to the security object
$authentication_provider =
    new DbBasicAuthenticationProvider($service, $model_factory->UserPdo());
$security->addAuthenticationProvider($authentication_provider);

// Add the database connection to the service object to coordinate transactions
$service->addTransactionCoordinator($pdo);

// Tell the service object to bind web services from our User and State objects
$service->bindFromObject($user);
$service->bindFromObject($state);
$service->bindFromObject($visited_state);

// Handle the request
$service->handleRequest();
?>
