<?php

namespace CougarTutorial\UnitTests;

use CougarTutorial\Models\VisitedStatePdo;
use CougarTutorial\Security\VisitedStateModelAuthorizationProvider;
use Cougar\PDO\PDO;
use Cougar\Security\Identity;
use Cougar\Security\Security;
use Cougar\Security\iAuthenticationProvider;
use Cougar\Exceptions\Exception;

require_once(__DIR__ . "/../init.php");

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-13 at 10:56:44.
 */
class VisitedStatePdoTest extends \PHPUnit_Framework_TestCase {
	/**
	 * var Cougar\Security\iSecurity Security context
	 */
	protected $security;

	/**
	 * var \PDO Database connection
	 */
	protected $pdo;

	/**
	 * var Cougar\Cache\iCache Cache mock
	 */
	protected $cache;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
        // Create a real security context
        $this->security = new Security();

        // Add the authorization provider
        $this->security->addAuthorizationProvider(
            new VisitedStateModelAuthorizationProvider());

        // Create mock cache to disable it and ensure everything goes through DB
        $this->cache = $this->getMock("\\Cougar\\Cache\\Cache");
        $this->cache->expects($this->any())
            ->method("get")
            ->will($this->returnValue(false));
        $this->cache->expects($this->any())
            ->method("set")
            ->will($this->returnValue(false));

		// Use local SQLite database
		$this->pdo = new PDO("sqlite::memory:");

        // Create the tables
        $this->pdo->exec("CREATE TABLE 'State' (
            'StateID' TEXT NOT NULL PRIMARY KEY,
            'Name' varchar(25) NOT NULL,
            'Capital' varchar(50) DEFAULT NULL,
            'LargestCity' varchar(50) DEFAULT NULL,
            'UnionDate' date DEFAULT NULL,
            'LandArea' mediumint(8)  DEFAULT NULL,
            'Counties' smallint(5)  DEFAULT NULL,
            'Population' int(10)  DEFAULT NULL)
        ");

        $this->pdo->exec("CREATE TABLE 'User' (
            'GivenName' TEXT NOT NULL,
            'LastName' TEXT NOT NULL,
            'Email' TEXT NOT NULL PRIMARY KEY,
            'Password' TEXT NOT NULL,
            'Administrator' BOOL NOT NULL DEFAULT 0)
        ");

        $this->pdo->exec("CREATE TABLE VisitedState(
            Email TEXT NOT NULL,
            StateID TEXT NOT NULL, UNIQUE (Email, StateID))
        ");

        // Add some basic data
        $this->pdo->exec("INSERT INTO State VALUES(
            'CA', 'California', 'Sacramento', 'Los Angeles',
            '1850-09-09', 155973, 58, 33871648)");
        $this->pdo->exec("INSERT INTO State VALUES(
            'FL', 'Florida', 'Tallahassee', 'Jacksonville',
            '1845-03-03', 53997, 67, 15982378)");
        $this->pdo->exec("INSERT INTO State VALUES(
            'NY', 'New York', 'Albany', 'New York City',
            '1788-07-25', 47224, 62, 18976457)");

        $this->pdo->exec("INSERT INTO User VALUES(
            'John', 'Doe', 'john.doe@example.com', '', 0)");
        $this->pdo->exec("INSERT INTO User VALUES(
            'Jane', 'Doe', 'jane.doe@example.com', '', 0)");

        $this->pdo->exec("INSERT INTO VisitedState VALUES(
            'john.doe@example.com', 'CA')");
        $this->pdo->exec("INSERT INTO VisitedState VALUES(
            'john.doe@example.com', 'FL')");
        $this->pdo->exec("INSERT INTO VisitedState VALUES(
            'jane.doe@example.com', 'NY')");
        $this->pdo->exec("INSERT INTO VisitedState VALUES(
            'jane.doe@example.com', 'FL')");
	}

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::save
     * @expectedException \Cougar\Exceptions\AccessDeniedException
     */
    public function testCreate()
    {
        // Create a blank entry
        $new_entry = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Set the values
        $new_entry->userId = "john.doe@example.com";
        $new_entry->stateId = "NY";
        $new_entry->save();
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::save
     */
    public function testCreateWithIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("john.doe@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Create a blank entry
        $new_entry = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Set the values
        $new_entry->userId = "john.doe@example.com";
        $new_entry->stateId = "NY";
        $new_entry->save();
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::save
     * @expectedException \Cougar\Exceptions\BadRequestException
     */
    public function testCreateWithIdentityBadUserId()
    {
        // Create a new identity with the information we want
        $identity = new Identity("john.doe@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Create a blank entry
        $new_entry = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Set the values
        $new_entry->userId = "";
        $new_entry->stateId = "NY";
        $new_entry->save();
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::save
     * @expectedException \Cougar\Exceptions\BadRequestException
     */
    public function testCreateWithIdentityBadStateId()
    {
        // Create a new identity with the information we want
        $identity = new Identity("john.doe@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Create a blank entry
        $new_entry = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Set the values
        $new_entry->userId = "john.doe@example.com";
        $new_entry->stateId = "New York";
        $new_entry->save();
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @expectedException \Cougar\Exceptions\AccessDeniedException
     */
    public function testRead()
    {
        // Get the entry
        $entry = new VisitedStatePdo($this->security, $this->cache, $this->pdo,
            array("userId" => "john.doe@example.com", "stateId" => "CA"));
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     */
    public function testReadWithIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("john.doe@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the entry
        $entry = new VisitedStatePdo($this->security, $this->cache, $this->pdo,
            array("userId" => "john.doe@example.com", "stateId" => "CA"));
        $this->assertEquals("john.doe@example.com", $entry->userId);
        $this->assertEquals("CA", $entry->stateId);
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::save
     * @expectedException \Cougar\Exceptions\AccessDeniedException
     */
    public function testModifyWithIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("nobody@example.com", array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Load the state information
        $entry = new VisitedStatePdo($this->security, $this->cache, $this->pdo,
            array("userId" => "john.doe@example.com", "stateId" => "CA"));

        $entry->stateId = "CA";
        $entry->save();
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::delete
     */
    public function testDeleteWithIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("john.doe@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the entry
        $entry = new VisitedStatePdo($this->security, $this->cache, $this->pdo,
            array("userId" => "john.doe@example.com", "stateId" => "CA"));

        $entry->delete();
    }
    
    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::query
     */
    public function testQuery()
    {
        // Get the model
        $vs_model = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Get all records
        $results = $vs_model->query();
        $this->assertCount(4, $results);
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::query
     */
    public function testQueryWithIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("john.doe@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the model
        $vs_model = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Get all records
        $results = $vs_model->query();
        $this->assertCount(4, $results);
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::query
     */
    public function testQueryWithAdminIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("admin@example.com", array("admin" => true));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the model
        $vs_model = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Get all records
        $results = $vs_model->query();
        $this->assertCount(4, $results);
    }
    
    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::queryVisitors
     */
    public function testQueryVisitors()
    {
        // Get the model
        $vs_model = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Get visitors to CA
        $results = $vs_model->queryVisitors("CA");
        $this->assertCount(1, $results);
        $this->assertCount(1, $results[0]);
        $this->assertArrayHasKey("state", $results[0]);
        $this->assertEquals("California", $results[0]["state"]);

        // Get visitors to FL
        $results = $vs_model->queryVisitors("FL");
        $this->assertCount(2, $results);
        $this->assertCount(1, $results[0]);
        $this->assertCount(1, $results[1]);
        $this->assertArrayHasKey("state", $results[0]);
        $this->assertArrayHasKey("state", $results[1]);
        $this->assertEquals("Florida", $results[0]["state"]);
        $this->assertEquals("Florida", $results[1]["state"]);
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::queryVisitors
     */
    public function testQueryVisitorsWithIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("john.doe@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the model
        $vs_model = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Get visitors to CA
        $results = $vs_model->queryVisitors("CA");
        $this->assertCount(1, $results);
        $this->assertCount(4, $results[0]);
        $this->assertArrayHasKey("givenName", $results[0]);
        $this->assertArrayHasKey("lastName", $results[0]);
        $this->assertArrayHasKey("emailAddress", $results[0]);
        $this->assertArrayHasKey("state", $results[0]);
        $this->assertEquals("John", $results[0]["givenName"]);
        $this->assertEquals("Doe", $results[0]["lastName"]);
        $this->assertEquals("john.doe@example.com", $results[0]["emailAddress"]);
        $this->assertEquals("California", $results[0]["state"]);

        // Get visitors to FL
        $results = $vs_model->queryVisitors("FL");
        $this->assertCount(2, $results);
        $this->assertCount(4, $results[0]);
        $this->assertCount(4, $results[1]);
        $this->assertArrayHasKey("givenName", $results[0]);
        $this->assertArrayHasKey("lastName", $results[0]);
        $this->assertArrayHasKey("emailAddress", $results[0]);
        $this->assertArrayHasKey("state", $results[0]);
        $this->assertArrayHasKey("givenName", $results[1]);
        $this->assertArrayHasKey("lastName", $results[1]);
        $this->assertArrayHasKey("emailAddress", $results[1]);
        $this->assertArrayHasKey("state", $results[1]);
        $this->assertNotEquals($results[0], $results[1]);
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::queryVisitors
     */
    public function testQueryVisitorsWithAdminIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("admin@example.com", array("admin" => true));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the model
        $vs_model = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Get visitors to CA
        $results = $vs_model->queryVisitors("CA");
        $this->assertCount(1, $results);
        $this->assertCount(4, $results[0]);
        $this->assertArrayHasKey("givenName", $results[0]);
        $this->assertArrayHasKey("lastName", $results[0]);
        $this->assertArrayHasKey("emailAddress", $results[0]);
        $this->assertArrayHasKey("state", $results[0]);
        $this->assertEquals("John", $results[0]["givenName"]);
        $this->assertEquals("Doe", $results[0]["lastName"]);
        $this->assertEquals("john.doe@example.com", $results[0]["emailAddress"]);
        $this->assertEquals("California", $results[0]["state"]);

        // Get visitors to FL
        $results = $vs_model->queryVisitors("FL");
        $this->assertCount(2, $results);
        $this->assertCount(4, $results[0]);
        $this->assertCount(4, $results[1]);
        $this->assertArrayHasKey("givenName", $results[0]);
        $this->assertArrayHasKey("lastName", $results[0]);
        $this->assertArrayHasKey("emailAddress", $results[0]);
        $this->assertArrayHasKey("state", $results[0]);
        $this->assertArrayHasKey("givenName", $results[1]);
        $this->assertArrayHasKey("lastName", $results[1]);
        $this->assertArrayHasKey("emailAddress", $results[1]);
        $this->assertArrayHasKey("state", $results[1]);
        $this->assertNotEquals($results[0], $results[1]);
    }
    
    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::queryVisitorCount
     */
    public function testQueryVisitorCount()
    {
        // Get the model
        $vs_model = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Get VisitorCount to CA
        $results = $vs_model->queryVisitorCount("CA");
        $this->assertEquals(1, $results);

        // Get VisitorCount to FL
        $results = $vs_model->queryVisitorCount("FL");
        $this->assertEquals(2, $results);

        // Get VisitorCount to NY
        $results = $vs_model->queryVisitorCount("NY");
        $this->assertEquals(1, $results);

        // Get VisitorCount to WY
        $results = $vs_model->queryVisitorCount("WY");
        $this->assertEquals(0, $results);
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::queryVisitorCount
     */
    public function testQueryVisitorCountWithIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("john.doe@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the model
        $vs_model = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Get VisitorCount to CA
        $results = $vs_model->queryVisitorCount("CA");
        $this->assertEquals(1, $results);

        // Get VisitorCount to FL
        $results = $vs_model->queryVisitorCount("FL");
        $this->assertEquals(2, $results);

        // Get VisitorCount to NY
        $results = $vs_model->queryVisitorCount("NY");
        $this->assertEquals(1, $results);

        // Get VisitorCount to WY
        $results = $vs_model->queryVisitorCount("WY");
        $this->assertEquals(0, $results);
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::queryVisitorCount
     */
    public function testQueryVisitorCountWithAdminIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("admin@example.com", array("admin" => true));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the model
        $vs_model = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Get VisitorCount to CA
        $results = $vs_model->queryVisitorCount("CA");
        $this->assertEquals(1, $results);

        // Get VisitorCount to FL
        $results = $vs_model->queryVisitorCount("FL");
        $this->assertEquals(2, $results);

        // Get VisitorCount to NY
        $results = $vs_model->queryVisitorCount("NY");
        $this->assertEquals(1, $results);

        // Get VisitorCount to WY
        $results = $vs_model->queryVisitorCount("WY");
        $this->assertEquals(0, $results);
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::queryVisited
     */
    public function testQueryVisited()
    {
        // Get the model
        $vs_model = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Get states visited by John Doe
        $results = $vs_model->queryVisited("john.doe@example.com");
        $this->assertCount(2, $results);
        $this->assertCount(1, $results[0]);
        $this->assertCount(1, $results[1]);
        $this->assertArrayHasKey("state", $results[0]);
        $this->assertArrayHasKey("state", $results[1]);
        $this->assertEquals("California", $results[0]["state"]);
        $this->assertEquals("Florida", $results[1]["state"]);

        // Get states visited by Jane Doe
        $results = $vs_model->queryVisited("jane.doe@example.com");
        $this->assertCount(2, $results);
        $this->assertCount(1, $results[0]);
        $this->assertCount(1, $results[1]);
        $this->assertArrayHasKey("state", $results[0]);
        $this->assertArrayHasKey("state", $results[1]);
        $this->assertEquals("Florida", $results[0]["state"]);
        $this->assertEquals("New York", $results[1]["state"]);

        // Get states visited by Admin
        $results = $vs_model->queryVisited("admin@example.com");
        $this->assertCount(0, $results);
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::queryVisited
     */
    public function testQueryVisitedWithIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("john.doe@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the model
        $vs_model = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Get the model
        $vs_model = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Get states visited by John Doe
        $results = $vs_model->queryVisited("john.doe@example.com");
        $this->assertCount(2, $results);
        $this->assertCount(4, $results[0]);
        $this->assertCount(4, $results[1]);
        $this->assertArrayHasKey("givenName", $results[0]);
        $this->assertArrayHasKey("lastName", $results[0]);
        $this->assertArrayHasKey("emailAddress", $results[0]);
        $this->assertArrayHasKey("state", $results[0]);
        $this->assertArrayHasKey("givenName", $results[1]);
        $this->assertArrayHasKey("lastName", $results[1]);
        $this->assertArrayHasKey("emailAddress", $results[1]);
        $this->assertArrayHasKey("state", $results[1]);
        $this->assertEquals("John", $results[0]["givenName"]);
        $this->assertEquals("Doe", $results[0]["lastName"]);
        $this->assertEquals("john.doe@example.com",
            $results[0]["emailAddress"]);
        $this->assertEquals("California", $results[0]["state"]);
        $this->assertEquals("John", $results[1]["givenName"]);
        $this->assertEquals("Doe", $results[1]["lastName"]);
        $this->assertEquals("john.doe@example.com",
            $results[0]["emailAddress"]);
        $this->assertEquals("Florida", $results[1]["state"]);

        // Get states visited by Jane Doe
        $results = $vs_model->queryVisited("jane.doe@example.com");
        $this->assertCount(2, $results);
        $this->assertCount(4, $results[0]);
        $this->assertCount(4, $results[1]);
        $this->assertArrayHasKey("state", $results[0]);
        $this->assertArrayHasKey("state", $results[1]);
        $this->assertEquals("Jane", $results[0]["givenName"]);
        $this->assertEquals("Doe", $results[0]["lastName"]);
        $this->assertEquals("jane.doe@example.com",
            $results[0]["emailAddress"]);
        $this->assertEquals("Florida", $results[0]["state"]);
        $this->assertEquals("Jane", $results[1]["givenName"]);
        $this->assertEquals("Doe", $results[1]["lastName"]);
        $this->assertEquals("jane.doe@example.com",
            $results[1]["emailAddress"]);
        $this->assertEquals("New York", $results[1]["state"]);

        // Get states visited by Admin
        $results = $vs_model->queryVisited("admin@example.com");
        $this->assertCount(0, $results);
    }

    /**
     * @covers CougarTutorial\VisitedStatePdo::__construct
     * @covers CougarTutorial\VisitedStatePdo::queryVisited
     */
    public function testQueryVisitedWithAdminIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("admin@example.com", array("admin" => true));

        // Add our test authentication provider
        $identity_provider = new VisitedStatePdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the model
        $vs_model = new VisitedStatePdo($this->security, $this->cache,
            $this->pdo);

        // Get states visited by John Doe
        $results = $vs_model->queryVisited("john.doe@example.com");
        $this->assertCount(2, $results);
        $this->assertCount(4, $results[0]);
        $this->assertCount(4, $results[1]);
        $this->assertArrayHasKey("givenName", $results[0]);
        $this->assertArrayHasKey("lastName", $results[0]);
        $this->assertArrayHasKey("emailAddress", $results[0]);
        $this->assertArrayHasKey("state", $results[0]);
        $this->assertArrayHasKey("givenName", $results[1]);
        $this->assertArrayHasKey("lastName", $results[1]);
        $this->assertArrayHasKey("emailAddress", $results[1]);
        $this->assertArrayHasKey("state", $results[1]);
        $this->assertEquals("John", $results[0]["givenName"]);
        $this->assertEquals("Doe", $results[0]["lastName"]);
        $this->assertEquals("john.doe@example.com",
            $results[0]["emailAddress"]);
        $this->assertEquals("California", $results[0]["state"]);
        $this->assertEquals("John", $results[1]["givenName"]);
        $this->assertEquals("Doe", $results[1]["lastName"]);
        $this->assertEquals("john.doe@example.com",
            $results[0]["emailAddress"]);
        $this->assertEquals("Florida", $results[1]["state"]);

        // Get states visited by Jane Doe
        $results = $vs_model->queryVisited("jane.doe@example.com");
        $this->assertCount(2, $results);
        $this->assertCount(4, $results[0]);
        $this->assertCount(4, $results[1]);
        $this->assertArrayHasKey("state", $results[0]);
        $this->assertArrayHasKey("state", $results[1]);
        $this->assertEquals("Jane", $results[0]["givenName"]);
        $this->assertEquals("Doe", $results[0]["lastName"]);
        $this->assertEquals("jane.doe@example.com",
            $results[0]["emailAddress"]);
        $this->assertEquals("Florida", $results[0]["state"]);
        $this->assertEquals("Jane", $results[1]["givenName"]);
        $this->assertEquals("Doe", $results[1]["lastName"]);
        $this->assertEquals("jane.doe@example.com",
            $results[1]["emailAddress"]);
        $this->assertEquals("New York", $results[1]["state"]);

        // Get states visited by Admin
        $results = $vs_model->queryVisited("admin@example.com");
        $this->assertCount(0, $results);
    }
}

class VisitedStatePdoModelTestIdentity implements iAuthenticationProvider
{
    public function __construct($identity)
    {
        if (! class_exists("PHPUnit_Framework_TestCase", false))
        {
            throw new Exception(
                "A Test Identity can only be used in a unit test");
        }

        $this->identity = $identity;
    }

    public function authenticate()
    {
        return $this->identity;
    }

    protected $identity;
}
?>