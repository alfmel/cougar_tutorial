<?php

namespace CougarTutorial\UnitTests;

use CougarTutorial\Models\UserPdo;
use Cougar\PDO\PDO;
use CougarTutorial\Security\UsernamePasswordCredentials;

require_once(__DIR__ . "/../init.php");

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-13 at 10:56:44.
 */
class UserPdoTest extends \PHPUnit_Framework_TestCase {
	/**
	 * var Cougar\Security\iSecurity Security context
	 */
	protected $security;

	/**
	 * var \PDO Database connection
	 */
	protected $pdo;

	/**
	 * var Cougar\Cache\iCache Cache mock
	 */
	protected $cache;

    /**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		// Get security object mock
        $this->security = $this->getMock("\\Cougar\\Security\\Security");

        // Create mock cache to disable it and ensure everything goes through DB
        $this->cache = $this->getMock("\\Cougar\\Cache\\Cache");
        $this->cache->expects($this->any())
            ->method("get")
            ->will($this->returnValue(false));
        $this->cache->expects($this->any())
            ->method("set")
            ->will($this->returnValue(false));

        // Create an in-memory SQLite database
        $this->pdo = new PDO('sqlite::memory:');

        // Create the User table
        $this->pdo->exec("CREATE TABLE 'User' (
            'GivenName' TEXT NOT NULL,
            'LastName' TEXT NOT NULL,
            'Email' TEXT NOT NULL PRIMARY KEY,
            'Password' TEXT NOT NULL,
            'Administrator' BOOL NOT NULL DEFAULT 0)");
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__save
     * @covers \CougarTutorial\Models\UserPdo::__query
     */
    public function testCreateUser()
    {
        $new_user = new UserPdo($this->security, $this->cache, $this->pdo);

        $new_user->givenName = "John";
        $new_user->lastName = "Doe";
        $new_user->emailAddress = "john.doe@some.tld";
        $new_user->password = "Password";

        $new_user->save();

        $new_user->__setView("identity");
        $user_list = $new_user->query();
        $this->assertCount(1, $user_list);
        $this->assertEquals("John", $user_list[0]["givenName"]);
        $this->assertEquals("Doe", $user_list[0]["lastName"]);
        $this->assertEquals("john.doe@some.tld", $user_list[0]["emailAddress"]);
        $this->assertFalse((bool) $user_list[0]["admin"]);
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__save
     * @covers \CougarTutorial\Models\UserPdo::__query
     */
    public function testCreateUserAdministrative()
    {
        $new_user = new UserPdo($this->security, $this->cache, $this->pdo);

        $new_user->givenName = "John";
        $new_user->lastName = "Doe";
        $new_user->emailAddress = "john.doe@some.tld";
        $new_user->password = "Password";
        $new_user->admin = true;

        $new_user->save();

        $new_user->__setView("identity");
        $user_list = $new_user->query();
        $this->assertCount(1, $user_list);
        $this->assertEquals("John", $user_list[0]["givenName"]);
        $this->assertEquals("Doe", $user_list[0]["lastName"]);
        $this->assertEquals("john.doe@some.tld", $user_list[0]["emailAddress"]);
        $this->assertTrue((bool) $user_list[0]["admin"]);
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @depends testCreateUser
     */
    public function testGetUser()
    {
        // Create the user
        $this->testCreateUser();

        // Get the user
        $user = new UserPdo($this->security, $this->cache, $this->pdo,
            array("id" => "john.doe@some.tld"));

        $this->assertEquals("John", $user->givenName);
        $this->assertEquals("Doe", $user->lastName);
        $this->assertEquals("john.doe@some.tld", $user->emailAddress);
        $this->assertEquals("8be3c943b1609fffbfc51aad666d0a04adf83c9d",
            $user->password);
        $this->assertEquals(false, $user->admin);

        return $user;
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__save
     * @depends testGetUser
     */
    public function testUpdateUser(\CougarTutorial\Models\UserPdo $user)
    {
        // Update the fields
        $user->givenName = "Mary";
        $user->lastName = "Jones";
        $user->password = "Abc123";
        $user->admin = true;
        $user->save();

        // Get the user to make sure changes were saved
        $user_list = $user->query();
        $this->assertCount(1, $user_list);
        $this->assertEquals("Mary", $user_list[0]["givenName"]);
        $this->assertEquals("Jones", $user_list[0]["lastName"]);
        $this->assertEquals("john.doe@some.tld", $user_list[0]["emailAddress"]);
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__delete
     * @depends testGetUser
     */
    public function testDeleteUser(\CougarTutorial\Models\UserPdo $user)
    {
        // Delete the user
        $user->delete();

        // Get the user to make sure changes were saved
        $user_list = $user->query();
        $this->assertCount(0, $user_list);
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__delete
     * @depends testCreateUser
     */
    public function testGetIdentityPositive()
    {
        $this->testCreateUser();

        $user = new UserPdo($this->security, $this->cache, $this->pdo);
        $credentials = new UsernamePasswordCredentials();
        $credentials->username = "john.doe@some.tld";
        $credentials->password = "Password";
        $identity = $user->getIdentity($credentials);

        $this->assertNotNull($identity);
        $this->assertArrayHasKey("id", $identity);
        $this->assertArrayHasKey("emailAddress", $identity);
        $this->assertArrayHasKey("givenName", $identity);
        $this->assertArrayHasKey("lastName", $identity);
        $this->assertArrayHasKey("admin", $identity);

        $this->assertEquals("john.doe@some.tld", $identity["id"]);
        $this->assertEquals("john.doe@some.tld", $identity["emailAddress"]);
        $this->assertEquals("John", $identity["givenName"]);
        $this->assertEquals("Doe", $identity["lastName"]);
        $this->assertFalse($identity["admin"]);
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__delete
     * @depends testCreateUser
     */
    public function testGetIdentityNegative()
    {
        $this->testCreateUser();

        $user = new UserPdo($this->security, $this->cache, $this->pdo);
        $credentials = new UsernamePasswordCredentials();
        $credentials->username = "john.doe@some.tld";
        $credentials->password = "Bad password";
        $identity = $user->getIdentity($credentials);

        $this->assertNull($identity);
    }
}
