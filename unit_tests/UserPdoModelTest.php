<?php

namespace CougarTutorial\UnitTests;

use CougarTutorial\Models\UserPdo;
use CougarTutorial\Security\UserModelAuthorizationProvider;
use CougarTutorial\Security\UsernamePasswordCredentials;
use Cougar\PDO\PDO;
use Cougar\Security\Identity;
use Cougar\Security\Security;
use Cougar\Security\iAuthenticationProvider;

require_once(__DIR__ . "/../init.php");

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-13 at 10:56:44.
 */
class UserPdoTest extends \PHPUnit_Framework_TestCase {
	/**
	 * var Cougar\Security\iSecurity Security context
	 */
	protected $security;

	/**
	 * var \PDO Database connection
	 */
	protected $pdo;

	/**
	 * var Cougar\Cache\iCache Cache mock
	 */
	protected $cache;

    /**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
        // Create a real security context
        $this->security = new Security();

        // Add the authorization provider
        $this->security->addAuthorizationProvider(
            new UserModelAuthorizationProvider());

        // Create mock cache to disable it and ensure everything goes through DB
        $this->cache = $this->getMock("\\Cougar\\Cache\\Cache");
        $this->cache->expects($this->any())
            ->method("get")
            ->will($this->returnValue(false));
        $this->cache->expects($this->any())
            ->method("set")
            ->will($this->returnValue(false));

        // Create an in-memory SQLite database
        $this->pdo = new PDO('sqlite::memory:');

        // Create the User table
        $this->pdo->exec("CREATE TABLE 'User' (
            'GivenName' TEXT NOT NULL,
            'LastName' TEXT NOT NULL,
            'Email' TEXT NOT NULL PRIMARY KEY,
            'Password' TEXT NOT NULL,
            'Administrator' BOOL NOT NULL DEFAULT 0)");
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__save
     * @covers \CougarTutorial\Models\UserPdo::__query
     */
    public function testCreateUser()
    {
        $id = $this->createUser();

        // Create a new identity with the information we want
        $identity = new Identity("admin@example.com", array("admin" => true));

        // Add our test authentication provider
        $identity_provider = new UserPdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        $user = $this->readUser($id);

        $this->assertEquals("John", $user->givenName);
        $this->assertEquals("Doe", $user->lastName);
        $this->assertEquals("john.doe@example.com", $user->emailAddress);
        $this->assertEquals(sha1("Password"), $user->password);
        $this->assertFalse($user->admin);
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__save
     * @covers \CougarTutorial\Models\UserPdo::__query
     * @expectedException \Cougar\Exceptions\AccessDeniedException
     */
    public function testCreateAdminUser()
    {
        $new_user = new UserPdo($this->security, $this->cache, $this->pdo);

        $new_user->givenName = "John";
        $new_user->lastName = "Doe";
        $new_user->emailAddress = "john.doe@example.com";
        $new_user->password = "Password";
        $new_user->admin = true;

        $new_user->save();
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__save
     * @covers \CougarTutorial\Models\UserPdo::__query
     * @expectedException \Cougar\Exceptions\AccessDeniedException
     */
    public function testCreateAdminUserWithIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("nobody@example.com", array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new UserPdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Create a model for the new user
        $new_user = new UserPdo($this->security, $this->cache, $this->pdo);

        $new_user->givenName = "John";
        $new_user->lastName = "Doe";
        $new_user->emailAddress = "john.doe@example.com";
        $new_user->password = "Password";
        $new_user->admin = true;

        $new_user->save();
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__save
     * @covers \CougarTutorial\Models\UserPdo::__query
     * @expectedException \Cougar\Exceptions\AccessDeniedException
     */
    public function testCreateUserWithIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("nobody@example.com", array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new UserPdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Create a model for the new user
        $new_user = new UserPdo($this->security, $this->cache, $this->pdo);

        $new_user->givenName = "John";
        $new_user->lastName = "Doe";
        $new_user->emailAddress = "john.doe@example.com";
        $new_user->password = "Password";

        $new_user->save();
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__save
     * @covers \CougarTutorial\Models\UserPdo::__query
     */
    public function testCreateAdminUserWithAdminIdentity()
    {
        // Create a new identity with the information we want
        $identity = new Identity("admin@example.com", array("admin" => true));

        // Add our test authentication provider
        $identity_provider = new UserPdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Create a model for the new user
        $new_user = new UserPdo($this->security, $this->cache, $this->pdo);
        $new_user->givenName = "John";
        $new_user->lastName = "Doe";
        $new_user->emailAddress = "john.doe@example.com";
        $new_user->password = "Password";
        $new_user->admin = true;

        $new_user->save();

        $user = $this->readUser("john.doe@example.com");

        $this->assertEquals("John", $user->givenName);
        $this->assertEquals("Doe", $user->lastName);
        $this->assertEquals("john.doe@example.com", $user->emailAddress);
        $this->assertEquals(sha1("Password"), $user->password);
        $this->assertTrue($user->admin);
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @depends testCreateUser
     * @expectedException \Cougar\Exceptions\AccessDeniedException
     */
    public function testReadUser()
    {
        // Create the user
        $id = $this->createUser();

        // Get the user
        $user = $this->readUser($id);
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @depends testCreateUser
     */
    public function testReadUserWithIdentity()
    {
        // Create the user
        $id = $this->createUser();

        // Create a new identity with the information we want
        $identity = new Identity("john.doe@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new UserPdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the user
        $user = $this->readUser($id);

        $this->assertEquals("John", $user->givenName);
        $this->assertEquals("Doe", $user->lastName);
        $this->assertEquals("john.doe@example.com", $user->emailAddress);
        $this->assertEquals("8be3c943b1609fffbfc51aad666d0a04adf83c9d",
            $user->password);
        $this->assertEquals(false, $user->admin);
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @depends testCreateUser
     */
    public function testReadUserWithAdminIdentity()
    {
        // Create the user
        $id = $this->createUser();

        // Create a new identity with the information we want
        $identity = new Identity("admin@example.com", array("admin" => true));

        // Add our test authentication provider
        $identity_provider = new UserPdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the user
        $user = $this->readUser($id);

        $this->assertEquals("John", $user->givenName);
        $this->assertEquals("Doe", $user->lastName);
        $this->assertEquals("john.doe@example.com", $user->emailAddress);
        $this->assertEquals("8be3c943b1609fffbfc51aad666d0a04adf83c9d",
            $user->password);
        $this->assertEquals(false, $user->admin);
    }

    /**
     * We can't test updating without an identity since we can't read the record
     * without an identity.
     */

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__save
     * @depends testReadUserWithIdentity
     * @expectedException \Cougar\Exceptions\AccessDeniedException
     */
    public function testUpdateUserWithIdentity()
    {
        // Create the user
        $id = $this->createUser();

        // Create a new identity with the information we want
        $identity = new Identity("nodobdy@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new UserPdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the user
        $user = $this->readUser($id);

        // Update the fields
        $user->givenName = "Mary";
        $user->lastName = "Jones";
        $user->save();
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__save
     * @depends testReadUserWithIdentity
     */
    public function testUpdateUserWithUserIdentity()
    {
        // Create the user
        $id = $this->createUser();

        // Create a new identity with the information we want
        $identity = new Identity("john.doe@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new UserPdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the user
        $user = $this->readUser($id);

        // Update the fields
        $user->givenName = "Mary";
        $user->lastName = "Jones";
        $user->password = "abc123";
        $user->save();

        // Get the modified user
        $mod_user = $this->readUser($id);

        $this->assertEquals("Mary", $mod_user->givenName);
        $this->assertEquals("Jones", $mod_user->lastName);
        $this->assertEquals("john.doe@example.com", $mod_user->emailAddress);
        $this->assertEquals(sha1("abc123"), $mod_user->password);
        $this->assertEquals(false, $user->admin);
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__save
     * @depends testReadUserWithIdentity
     * @expectedException \Cougar\Exceptions\BadRequestException
     */
    public function testUpdateUserWithUserIdentitySetAdmin()
    {
        // Create the user
        $id = $this->createUser();

        // Create a new identity with the information we want
        $identity = new Identity("john.doe@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new UserPdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the user
        $user = $this->readUser($id);

        // Update the fields
        $user->admin = true;
        $user->save();
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__save
     * @depends testReadUserWithIdentity
     */
    public function testUpdateUserWithAdminIdentity()
    {
        // Create the user
        $id = $this->createUser();

        // Create a new identity with the information we want
        $identity = new Identity("admin@example.com", array("admin" => true));

        // Add our test authentication provider
        $identity_provider = new UserPdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the user
        $user = $this->readUser($id);

        // Update the fields
        $user->givenName = "Mary";
        $user->lastName = "Jones";
        $user->password = "abc123";
        $user->admin = true;
        $user->save();

        // Get the modified user
        $mod_user = $this->readUser($id);

        $this->assertEquals("Mary", $mod_user->givenName);
        $this->assertEquals("Jones", $mod_user->lastName);
        $this->assertEquals("john.doe@example.com", $mod_user->emailAddress);
        $this->assertEquals(sha1("abc123"), $mod_user->password);
        $this->assertEquals(true, $user->admin);
    }

    /**
     * We can't test deleting without an identity since we can't read the record
     * without an identity.
     */

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__delete
     * @depends testCreateUser
     * @expectedException \Cougar\Exceptions\AccessDeniedException
     */
    public function testDeleteUserWithIdentity()
    {
        // Create the user
        $id = $this->createUser();

        // Create a new identity with the information we want
        $identity = new Identity("nobody@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new UserPdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the user
        $user = $this->readUser($id);

        // Delete the user
        $user->delete();
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__delete
     * @depends testCreateUser
     */
    public function testDeleteUserWithUserIdentity()
    {
        // Create the user
        $id = $this->createUser();

        // Create a new identity with the information we want
        $identity = new Identity("john.doe@example.com",
            array("admin" => false));

        // Add our test authentication provider
        $identity_provider = new UserPdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the user
        $user = $this->readUser($id);

        // Delete the user
        $user->delete();
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__delete
     * @depends testCreateUser
     */
    public function testDeleteUserWithAdminIdentity()
    {
        // Create the user
        $id = $this->createUser();

        // Create a new identity with the information we want
        $identity = new Identity("admin@example.com", array("admin" => true));

        // Add our test authentication provider
        $identity_provider = new UserPdoModelTestIdentity($identity);
        $this->security->addAuthenticationProvider($identity_provider);
        $this->security->authenticate();

        // Get the user
        $user = $this->readUser($id);

        // Delete the user
        $user->delete();
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__delete
     * @depends testCreateUser
     */
    public function testGetIdentityPositive()
    {
        $this->testCreateUser();

        $user = new UserPdo($this->security, $this->cache, $this->pdo);
        $credentials = new UsernamePasswordCredentials();
        $credentials->username = "john.doe@example.com";
        $credentials->password = "Password";
        $identity = $user->getIdentity($credentials);

        $this->assertNotNull($identity);
        $this->assertArrayHasKey("id", $identity);
        $this->assertArrayHasKey("emailAddress", $identity);
        $this->assertArrayHasKey("givenName", $identity);
        $this->assertArrayHasKey("lastName", $identity);
        $this->assertArrayHasKey("admin", $identity);

        $this->assertEquals("john.doe@example.com", $identity["id"]);
        $this->assertEquals("john.doe@example.com", $identity["emailAddress"]);
        $this->assertEquals("John", $identity["givenName"]);
        $this->assertEquals("Doe", $identity["lastName"]);
        $this->assertTrue($identity["admin"]);
    }

    /**
     * @covers \CougarTutorial\Models\UserPdo::__construct
     * @covers \CougarTutorial\Models\UserPdo::__delete
     * @depends testCreateUser
     */
    public function testGetIdentityNegative()
    {
        $this->testCreateUser();

        $user = new UserPdo($this->security, $this->cache, $this->pdo);
        $credentials = new UsernamePasswordCredentials();
        $credentials->username = "john.doe@example.com";
        $credentials->password = "Bad password";
        $identity = $user->getIdentity($credentials);

        $this->assertNull($identity);
    }

    /**
     * Creates a standard user
     */
    protected function createUser()
    {
        $new_user = new UserPdo($this->security, $this->cache, $this->pdo);

        $new_user->givenName = "John";
        $new_user->lastName = "Doe";
        $new_user->emailAddress = "john.doe@example.com";
        $new_user->password = "Password";

        $new_user->save();

        return $new_user->emailAddress;
    }

    /**
     * Reads the given user
     */
    protected function readUser($id)
    {
        return new UserPdo($this->security, $this->cache, $this->pdo,
            array("id" => $id));
    }
}

class UserPdoModelTestIdentity implements iAuthenticationProvider
{
    public function __construct($identity)
    {
        if (! class_exists("PHPUnit_Framework_TestCase", false))
        {
            throw new Exception(
                "A Test Identity can only be used in a unit test");
        }

        $this->identity = $identity;
    }

    public function authenticate()
    {
        return $this->identity;
    }

    protected $identity;
}
?>
